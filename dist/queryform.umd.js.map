{"version":3,"file":"queryform.umd.js","sources":["../src/queryform.js"],"sourcesContent":["class Queryform {\n\n  constructor(websiteId = null, apiRoute = 'https://queryform.co/api/website/') {\n    this.websiteId = websiteId;\n    this.domainUTMs = [];\n    this.apiRoute = apiRoute;\n    this.debug = false;\n    this.local = false;\n    this.cacheUntil = null;\n  }\n\n  /**\n   * Fetch domain parameters from the API\n   * @returns {Promise<void>}\n   */\n\n  async fetchDomainParams() {\n    this.logMessage('Fetching parameters from queryform api.');\n    try {\n      const response = await fetch(`${this.apiRoute}${this.websiteId}`);\n      if (response.ok) {\n        const resp = await response.json();\n        this.domainUTMs = resp.parameters;\n        // get cache until from X-Queryform-Cache-Until header\n        const cacheUntil = response.headers.get('X-Queryform-Cache-Until');\n        // get current queryform data\n        const queryformData = this.getSavedQueryformData();\n        const values = queryformData.values || {};\n        this.saveQueryformData(resp.parameters, values, cacheUntil);\n\n      } else {\n        console.warn('Failed to fetch domain parameters:', response.statusText);\n      }\n    } catch (err) {\n      console.warn('Error fetching domain parameters:', err);\n    }\n  }\n\n  /**\n   * Initialize the Queryform\n   * @param {Object} config - Configuration object\n   * @param {boolean} config.debug - Enable debug mode\n   * @returns {void}\n   * @example\n   * Retrieve domain parameters from Queryform API\n   * const queryform = new Queryform('xxxx-xxxx-xxxx-xxxx');\n   * queryform.init();\n   * @example\n   * Use local domain parameters\n   * const queryform = new Queryform();\n   * queryform.init({ local: true }, [ { param: 'utm_source', class_name: 'qf_utm_source' } ]);\n   */\n\n  async init(config = { debug: false, local: false }, utms = []) {\n\n    this.debug = config.debug;\n    this.local = config.local;\n\n    if (this.local){\n      this.fetchLocalParams(utms)\n    }else{\n      const cacheUntil = this.getCacheUntil();\n      // Convert cacheUntil to America/New_York timezone\n      const cacheUntilInNY = new Date(cacheUntil);\n      // Get the current time in America/New_York timezone\n      const currentDateTimeInNY = new Date(new Date().toLocaleString('en-US', { timeZone: 'America/New_York' }));\n      // Compare the two dates\n      if (cacheUntil && cacheUntilInNY > currentDateTimeInNY) {\n        this.logMessage(`Cache is still valid until ${cacheUntil}`);\n      } else {\n        await this.fetchDomainParams();\n      }\n    }\n    this.configureQueryform();\n  }\n\n  /**\n   * Fetch local domain parameters\n   * @param {Array} utms - Local domain parameters\n   *\n   *\n   * @returns {void}\n   * @private\n   */\n\n  fetchLocalParams(utms) {\n    // validate the format of the utms array\n    if (!Array.isArray(utms)) {\n      console.warn('Invalid utms array:', utms);\n      return;\n    }\n    // validate the format of the utms array sub-items\n    if (utms.some(({ param, class_name }) => !param || !class_name)) {\n      console.warn('Invalid utms array sub-items:', utms);\n      return;\n    }\n    // store the utms array\n    const queryformData = this.getSavedQueryformData();\n    const values = queryformData.values || {};\n    this.saveQueryformData(utms, values, null);\n  }\n\n  /**\n   * Configure the Queryform\n   * @returns {void}\n   * @private\n   */\n\n  configureQueryform() {\n    // Check if domainUTMs is empty\n    const queryParams = this.parseURLParams();\n\n    this.storeParams(queryParams);\n\n    const queryformData = this.getSavedQueryformData();\n    const domainUTMs = queryformData.params;\n    const storedParams = queryformData.values;\n\n    if (storedParams && Object.keys(storedParams).length > 0) {\n      this.logMessage('Populating form inputs.');\n      this.populateFormInputs(storedParams, domainUTMs);\n    }\n  }\n\n  /**\n   * Log initialization message\n   * @returns {void}\n   * @private\n   */\n\n  logMessage(msg) {\n    if(!this.debug) return;\n    console.log(\n      `%c Queryform` + `%c v1.0` + `%c ${msg}`,\n      'background: #222; color: #2563eb; padding: 10px;',\n      'background: #222; color: #fff; font-size:8px; padding: 12px 10px;',\n      'background: #222; color: #777; font-size:8px; padding: 12px 10px;'\n    );\n  }\n\n  /**\n   * Check if localStorage is available\n   * @returns {boolean}\n   * @private\n   */\n\n  isLocalStorageAvailable() {\n    return typeof Storage !== 'undefined';\n  }\n\n  /**\n   * Parse URL parameters\n   * @returns {Object}\n   * @private\n   */\n\n  parseURLParams() {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (!urlParams) return;\n    const utms = {};\n    const queryformData = this.getSavedQueryformData();\n    queryformData.params.forEach(({ param }) => {\n      if (urlParams.has(param)) {\n        utms[param] = urlParams.get(param);\n        this.logMessage(`Valid URL parameter found [${param}].`);\n      }\n    });\n    return Object.keys(utms).length > 0 ? utms : null;\n  }\n\n  /**\n   * Store URL parameters in localStorage\n   * @param {Object} queryParams - URL parameters\n   * @returns {Object}\n   * @private\n   */\n\n  storeParams(queryParams) {\n    if (!this.isLocalStorageAvailable() || !queryParams) return;\n    const queryformData = this.getSavedQueryformData();\n    queryformData.params.forEach(({ param, class_name }) => {\n      if (queryParams[param]) {\n        queryformData.values[param] = {\n          class_name,\n          value: queryParams[param],\n        };\n      }\n    });\n    this.saveQueryformData(queryformData.params, queryformData.values, queryformData.cacheUntil);\n  }\n\n  /**\n   * Get stored parameters from localStorage\n   * @returns {Object}\n   */\n\n  getStoredParamValues() {\n    if (this.isLocalStorageAvailable()) {\n      const queryformData = this.getSavedQueryformData();\n      return queryformData.values;\n    }\n    return {};\n  }\n\n  /**\n   * Get stored parameters from localStorage\n   * @returns {Object}\n  */\n\n  getStoredParams() {\n    if (this.isLocalStorageAvailable()) {\n      const queryformData = this.getSavedQueryformData();\n      return queryformData.params;\n    }\n    return {};\n  }\n\n  /**\n   * Get last fetched time\n   * @returns {string}\n   * @private\n   */\n\n  getCacheUntil() {\n    const queryformData = this.getSavedQueryformData();\n    return queryformData.cacheUntil;\n  }\n\n  /**\n   * Get stored parameters from localStorage\n   * @returns {Object}\n  */\n\n  getSavedQueryformData() {\n    if (this.isLocalStorageAvailable()) {\n      return JSON.parse(localStorage.getItem('queryform')) || {};\n    }\n    return {};\n  }\n\n  saveQueryformData(params, values, cacheUntil) {\n    if (this.isLocalStorageAvailable()) {\n      localStorage.setItem('queryform', JSON.stringify({\n        params,\n        values,\n        cacheUntil,\n      }));\n      return this.getSavedQueryformData();\n    }\n  }\n\n  /**\n   * Populate form inputs with stored parameters\n   * @param {Object} storedParams - Stored parameters\n   * @param {Array} domainUTMs - Domain parameters\n   * @returns {void}\n   * @private\n   */\n\n  populateFormInputs(storedParams, domainUTMs) {\n    const inputSelectors = Object.values(storedParams).map(\n      ({ class_name }) => `.${class_name}`\n    );\n    const inputs = document.querySelectorAll(inputSelectors.join(','));\n\n    inputs.forEach((inputElement) => {\n      const input = inputElement.tagName.toLowerCase() === 'input' ? inputElement : inputElement.querySelector('input');\n      if (!input) return;\n\n      const inputClass = inputElement.className.split(' ').find(\n        className => inputSelectors.includes(`.${className}`)\n      );\n\n      if (inputClass) {\n        const matchingUTM = domainUTMs.find(({ class_name }) => class_name === inputClass);\n        if (matchingUTM) {\n          input.value = storedParams[matchingUTM.param]?.value || '';\n        }\n      }\n    });\n  }\n\n}\n\nexport default Queryform;\n"],"names":["Queryform","websiteId","apiRoute","response","resp","cacheUntil","values","err","config","utms","cacheUntilInNY","currentDateTimeInNY","param","class_name","queryParams","queryformData","domainUTMs","storedParams","msg","urlParams","params","inputSelectors","inputElement","input","inputClass","className","matchingUTM","_a"],"mappings":"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"}