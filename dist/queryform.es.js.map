{"version":3,"file":"queryform.es.js","sources":["../src/queryform.js"],"sourcesContent":["class Queryform {\n\n  constructor(websiteId = null, apiRoute = 'https://queryform.co/api/website/') {\n    this.websiteId = websiteId;\n    this.domainUTMs = [];\n    this.apiRoute = apiRoute;\n    this.debug = false;\n    this.local = false;\n    this.cacheUntil = null;\n  }\n\n  /**\n   * Fetch domain parameters from the API\n   * @returns {Promise<void>}\n   */\n\n  async fetchDomainParams() {\n    this.logMessage('Fetching parameters from queryform api.');\n    try {\n      const response = await fetch(`${this.apiRoute}${this.websiteId}`);\n      if (response.ok) {\n        const resp = await response.json();\n        this.domainUTMs = resp.parameters;\n        this.cacheUntil = resp.cache_until;\n        // get current queryform data\n        const queryformData = this.getSavedQueryformData();\n        const values = queryformData.values || {};\n        this.saveQueryformData(resp.parameters, values, resp.cache_until);\n\n      } else {\n        console.warn('Failed to fetch domain parameters:', response.statusText);\n      }\n    } catch (err) {\n      console.warn('Error fetching domain parameters:', err);\n    }\n  }\n\n  /**\n   * Initialize the Queryform\n   * @param {Object} config - Configuration object\n   * @param {boolean} config.debug - Enable debug mode\n   * @returns {void}\n   * @example\n   * Retrieve domain parameters from Queryform API\n   * const queryform = new Queryform('xxxx-xxxx-xxxx-xxxx');\n   * queryform.init();\n   * @example\n   * Use local domain parameters\n   * const queryform = new Queryform();\n   * queryform.init({ local: true }, [ { param: 'utm_source', class_name: 'qf_utm_source' } ]);\n   */\n\n  async init(config = { debug: false, local: false }, utms = []) {\n\n    this.debug = config.debug;\n    this.local = config.local;\n\n    if (this.local){\n      this.fetchLocalParams(utms)\n    }else{\n      const cacheUntil = this.getCacheUntil();\n      // Convert cacheUntil to America/New_York timezone\n      const cacheUntilInNY = new Date(cacheUntil);\n      // Get the current time in America/New_York timezone\n      const currentDateTimeInNY = new Date(new Date().toLocaleString('en-US', { timeZone: 'America/New_York' }));\n      // Compare the two dates\n      if (cacheUntilInNY > currentDateTimeInNY) {\n        this.logMessage(`Cache is still valid until ${cacheUntil}`);\n      } else {\n        await this.fetchDomainParams();\n      }\n    }\n    this.configureQueryform();\n  }\n\n  /**\n   * Fetch local domain parameters\n   * @param {Array} utms - Local domain parameters\n   *\n   *\n   * @returns {void}\n   * @private\n   */\n\n  fetchLocalParams(utms) {\n    // validate the format of the utms array\n    if (!Array.isArray(utms)) {\n      console.warn('Invalid utms array:', utms);\n      return;\n    }\n    // validate the format of the utms array sub-items\n    if (utms.some(({ param, class_name }) => !param || !class_name)) {\n      console.warn('Invalid utms array sub-items:', utms);\n      return;\n    }\n    // store the utms array\n    const queryformData = this.getSavedQueryformData();\n    const values = queryformData.values || {};\n    this.saveQueryformData(utms, values, null);\n  }\n\n  /**\n   * Configure the Queryform\n   * @returns {void}\n   * @private\n   */\n\n  configureQueryform() {\n    // Check if domainUTMs is empty\n    const queryParams = this.parseURLParams();\n\n    this.storeParams(queryParams);\n\n    const queryformData = this.getSavedQueryformData();\n    const domainUTMs = queryformData.params;\n    const storedParams = queryformData.values;\n\n    if (storedParams && Object.keys(storedParams).length > 0) {\n      this.logMessage('Populating form inputs.');\n      this.populateFormInputs(storedParams, domainUTMs);\n    }\n  }\n\n  /**\n   * Log initialization message\n   * @returns {void}\n   * @private\n   */\n\n  logMessage(msg) {\n    if(!this.debug) return;\n    console.log(\n      `%c Queryform` + `%c v1.0` + `%c ${msg}`,\n      'background: #222; color: #2563eb; padding: 10px;',\n      'background: #222; color: #fff; font-size:8px; padding: 12px 10px;',\n      'background: #222; color: #777; font-size:8px; padding: 12px 10px;'\n    );\n  }\n\n  /**\n   * Check if localStorage is available\n   * @returns {boolean}\n   * @private\n   */\n\n  isLocalStorageAvailable() {\n    return typeof Storage !== 'undefined';\n  }\n\n  /**\n   * Parse URL parameters\n   * @returns {Object}\n   * @private\n   */\n\n  parseURLParams() {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (!urlParams) return;\n    const utms = {};\n    const queryformData = this.getSavedQueryformData();\n    queryformData.params.forEach(({ param }) => {\n      if (urlParams.has(param)) {\n        utms[param] = urlParams.get(param);\n        this.logMessage(`Valid URL parameter found [${param}].`);\n      }\n    });\n    return Object.keys(utms).length > 0 ? utms : null;\n  }\n\n  /**\n   * Store URL parameters in localStorage\n   * @param {Object} queryParams - URL parameters\n   * @returns {Object}\n   * @private\n   */\n\n  storeParams(queryParams) {\n    if (!this.isLocalStorageAvailable() || !queryParams) return;\n    const queryformData = this.getSavedQueryformData();\n    queryformData.params.forEach(({ param, class_name }) => {\n      if (queryParams[param]) {\n        queryformData.values[param] = {\n          class_name,\n          value: queryParams[param],\n        };\n      }\n    });\n    this.saveQueryformData(queryformData.params, queryformData.values, queryformData.cacheUntil);\n  }\n\n  /**\n   * Get stored parameters from localStorage\n   * @returns {Object}\n   */\n\n  getStoredParamValues() {\n    if (this.isLocalStorageAvailable()) {\n      const queryformData = this.getSavedQueryformData();\n      return queryformData.values;\n    }\n    return {};\n  }\n\n  /**\n   * Get stored parameters from localStorage\n   * @returns {Object}\n  */\n\n  getStoredParams() {\n    if (this.isLocalStorageAvailable()) {\n      const queryformData = this.getSavedQueryformData();\n      return queryformData.params;\n    }\n    return {};\n  }\n\n  /**\n   * Get last fetched time\n   * @returns {string}\n   * @private\n   */\n\n  getCacheUntil() {\n    const queryformData = this.getSavedQueryformData();\n    return queryformData.cacheUntil;\n  }\n\n  /**\n   * Get stored parameters from localStorage\n   * @returns {Object}\n  */\n\n  getSavedQueryformData() {\n    if (this.isLocalStorageAvailable()) {\n      return JSON.parse(localStorage.getItem('queryform')) || {};\n    }\n    return {};\n  }\n\n  saveQueryformData(params, values, cacheUntil) {\n    if (this.isLocalStorageAvailable()) {\n      localStorage.setItem('queryform', JSON.stringify({\n        params,\n        values,\n        cacheUntil,\n      }));\n      return this.getSavedQueryformData();\n    }\n  }\n\n  /**\n   * Populate form inputs with stored parameters\n   * @param {Object} storedParams - Stored parameters\n   * @param {Array} domainUTMs - Domain parameters\n   * @returns {void}\n   * @private\n   */\n\n  populateFormInputs(storedParams, domainUTMs) {\n    const inputSelectors = Object.values(storedParams).map(\n      ({ class_name }) => `.${class_name}`\n    );\n    const inputs = document.querySelectorAll(inputSelectors.join(','));\n\n    inputs.forEach((inputElement) => {\n      const input = inputElement.tagName.toLowerCase() === 'input' ? inputElement : inputElement.querySelector('input');\n      if (!input) return;\n\n      const inputClass = inputElement.className.split(' ').find(\n        className => inputSelectors.includes(`.${className}`)\n      );\n\n      if (inputClass) {\n        const matchingUTM = domainUTMs.find(({ class_name }) => class_name === inputClass);\n        if (matchingUTM) {\n          input.value = storedParams[matchingUTM.param]?.value || '';\n        }\n      }\n    });\n  }\n\n}\n\nexport default Queryform;\n"],"names":["Queryform","websiteId","apiRoute","response","resp","values","err","config","utms","cacheUntil","cacheUntilInNY","currentDateTimeInNY","param","class_name","queryParams","queryformData","domainUTMs","storedParams","msg","urlParams","params","inputSelectors","inputElement","_a","input","inputClass","className","matchingUTM"],"mappings":"AAAA,MAAMA,EAAU;AAAA,EAEd,YAAYC,IAAY,MAAMC,IAAW,qCAAqC;AAC5E,SAAK,YAAYD,GACjB,KAAK,aAAa,IAClB,KAAK,WAAWC,GAChB,KAAK,QAAQ,IACb,KAAK,QAAQ,IACb,KAAK,aAAa;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,oBAAoB;AACxB,SAAK,WAAW,yCAAyC;AACzD,QAAI;AACF,YAAMC,IAAW,MAAM,MAAM,GAAG,KAAK,QAAQ,GAAG,KAAK,SAAS,EAAE;AAChE,UAAIA,EAAS,IAAI;AACf,cAAMC,IAAO,MAAMD,EAAS;AAC5B,aAAK,aAAaC,EAAK,YACvB,KAAK,aAAaA,EAAK;AAGvB,cAAMC,IADgB,KAAK,wBACE,UAAU;AACvC,aAAK,kBAAkBD,EAAK,YAAYC,GAAQD,EAAK,WAAW;AAAA,MAExE;AACQ,gBAAQ,KAAK,sCAAsCD,EAAS,UAAU;AAAA,IAEzE,SAAQG,GAAK;AACZ,cAAQ,KAAK,qCAAqCA,CAAG;AAAA,IACtD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBD,MAAM,KAAKC,IAAS,EAAE,OAAO,IAAO,OAAO,GAAK,GAAIC,IAAO,IAAI;AAK7D,QAHA,KAAK,QAAQD,EAAO,OACpB,KAAK,QAAQA,EAAO,OAEhB,KAAK;AACP,WAAK,iBAAiBC,CAAI;AAAA,SACvB;AACH,YAAMC,IAAa,KAAK,iBAElBC,IAAiB,IAAI,KAAKD,CAAU,GAEpCE,IAAsB,IAAI,MAAK,oBAAI,KAAM,GAAC,eAAe,SAAS,EAAE,UAAU,mBAAkB,CAAE,CAAC;AAEzG,MAAID,IAAiBC,IACnB,KAAK,WAAW,8BAA8BF,CAAU,EAAE,IAE1D,MAAM,KAAK;IAEd;AACD,SAAK,mBAAkB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWD,iBAAiBD,GAAM;AAErB,QAAI,CAAC,MAAM,QAAQA,CAAI,GAAG;AACxB,cAAQ,KAAK,uBAAuBA,CAAI;AACxC;AAAA,IACD;AAED,QAAIA,EAAK,KAAK,CAAC,EAAE,OAAAI,GAAO,YAAAC,EAAU,MAAO,CAACD,KAAS,CAACC,CAAU,GAAG;AAC/D,cAAQ,KAAK,iCAAiCL,CAAI;AAClD;AAAA,IACD;AAGD,UAAMH,IADgB,KAAK,wBACE,UAAU;AACvC,SAAK,kBAAkBG,GAAMH,GAAQ,IAAI;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,qBAAqB;AAEnB,UAAMS,IAAc,KAAK;AAEzB,SAAK,YAAYA,CAAW;AAE5B,UAAMC,IAAgB,KAAK,yBACrBC,IAAaD,EAAc,QAC3BE,IAAeF,EAAc;AAEnC,IAAIE,KAAgB,OAAO,KAAKA,CAAY,EAAE,SAAS,MACrD,KAAK,WAAW,yBAAyB,GACzC,KAAK,mBAAmBA,GAAcD,CAAU;AAAA,EAEnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,WAAWE,GAAK;AACd,IAAI,KAAK,SACT,QAAQ;AAAA,MACN,yBAAmCA,CAAG;AAAA,MACtC;AAAA,MACA;AAAA,MACA;AAAA,IACN;AAAA,EACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,0BAA0B;AACxB,WAAO,OAAO,UAAY;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,iBAAiB;AACf,UAAMC,IAAY,IAAI,gBAAgB,OAAO,SAAS,MAAM;AAC5D,QAAI,CAACA,EAAW;AAChB,UAAMX,IAAO,CAAA;AAEb,WADsB,KAAK,wBACb,OAAO,QAAQ,CAAC,EAAE,OAAAI,EAAK,MAAO;AAC1C,MAAIO,EAAU,IAAIP,CAAK,MACrBJ,EAAKI,CAAK,IAAIO,EAAU,IAAIP,CAAK,GACjC,KAAK,WAAW,8BAA8BA,CAAK,IAAI;AAAA,IAE/D,CAAK,GACM,OAAO,KAAKJ,CAAI,EAAE,SAAS,IAAIA,IAAO;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,YAAYM,GAAa;AACvB,QAAI,CAAC,KAAK,6BAA6B,CAACA,EAAa;AACrD,UAAMC,IAAgB,KAAK;AAC3B,IAAAA,EAAc,OAAO,QAAQ,CAAC,EAAE,OAAAH,GAAO,YAAAC,EAAU,MAAO;AACtD,MAAIC,EAAYF,CAAK,MACnBG,EAAc,OAAOH,CAAK,IAAI;AAAA,QAC5B,YAAAC;AAAA,QACA,OAAOC,EAAYF,CAAK;AAAA,MAClC;AAAA,IAEA,CAAK,GACD,KAAK,kBAAkBG,EAAc,QAAQA,EAAc,QAAQA,EAAc,UAAU;AAAA,EAC5F;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,uBAAuB;AACrB,WAAI,KAAK,4BACe,KAAK,wBACN,SAEhB;EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,kBAAkB;AAChB,WAAI,KAAK,4BACe,KAAK,wBACN,SAEhB;EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,gBAAgB;AAEd,WADsB,KAAK,wBACN;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,wBAAwB;AACtB,WAAI,KAAK,4BACA,KAAK,MAAM,aAAa,QAAQ,WAAW,CAAC,KAAK,KAEnD;EACR;AAAA,EAED,kBAAkBK,GAAQf,GAAQI,GAAY;AAC5C,QAAI,KAAK;AACP,0BAAa,QAAQ,aAAa,KAAK,UAAU;AAAA,QAC/C,QAAAW;AAAA,QACA,QAAAf;AAAA,QACA,YAAAI;AAAA,MACD,CAAA,CAAC,GACK,KAAK;EAEf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,mBAAmBQ,GAAcD,GAAY;AAC3C,UAAMK,IAAiB,OAAO,OAAOJ,CAAY,EAAE;AAAA,MACjD,CAAC,EAAE,YAAAJ,EAAY,MAAK,IAAIA,CAAU;AAAA,IACxC;AAGI,IAFe,SAAS,iBAAiBQ,EAAe,KAAK,GAAG,CAAC,EAE1D,QAAQ,CAACC,MAAiB;AAxQrC,UAAAC;AAyQM,YAAMC,IAAQF,EAAa,QAAQ,YAAa,MAAK,UAAUA,IAAeA,EAAa,cAAc,OAAO;AAChH,UAAI,CAACE,EAAO;AAEZ,YAAMC,IAAaH,EAAa,UAAU,MAAM,GAAG,EAAE;AAAA,QACnD,CAAAI,MAAaL,EAAe,SAAS,IAAIK,CAAS,EAAE;AAAA,MAC5D;AAEM,UAAID,GAAY;AACd,cAAME,IAAcX,EAAW,KAAK,CAAC,EAAE,YAAAH,QAAiBA,MAAeY,CAAU;AACjF,QAAIE,MACFH,EAAM,UAAQD,IAAAN,EAAaU,EAAY,KAAK,MAA9B,gBAAAJ,EAAiC,UAAS;AAAA,MAE3D;AAAA,IACP,CAAK;AAAA,EACF;AAEH;"}